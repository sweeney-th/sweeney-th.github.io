I"¿<p>Object-Oriented Programming is a huge topic, and a unit dedicated to it has been in the queue for PyWy for some time. In the mean time, here is a crash course to give you an idea of what to expect!</p>

<p>**&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;</p>
<div class="container" id="notebook-container">
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <h1 id="Object-Oriented-Programming-(OOP)">
            Object Oriented Programming (OOP)<a class="anchor-link" href="#Object-Oriented-Programming-(OOP)">Â¶</a>
          </h1>
          
          <p>
            OOP is often considered a little weird to learn, but becomes very intuitive with some practice because it is used to model real things. It's used to imitate things from the real world and store data in the same way they do.
          </p>
          
          <p>
            A "class" is a model or blueprint for how to store that information. You might have a class to imitate "Students". Each INDIVIDUAL occurrence of a class is called and "object". If there was a class called "Student", you and I were students, we would be individual objects of the type "Student". In Python code this looks like this:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [541]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>                    <span class="c1"># class "Student" is an object</span>
    
    <span class="k">def</span> <span class="nf">say_what_you_are</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>           <span class="c1"># def is Python's version of sub - we're making a function acting on self</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I am a student"</span><span class="p">)</span>           <span class="c1"># print out a message </span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <h1 id="Initialization">
            Initialization<a class="anchor-link" href="#Initialization">Â¶</a>
          </h1>
          
          <p>
            This is simply a way to say "creation". We've described to the computer how to make a Student, but keep in mind we didn't actually tell it to do so. We just told it HOW to do so. It's the blueprint NOT a building.
          </p>
          
          <p>
            Now let's make an individual object:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [542]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">Jiaojiao</span> <span class="o">=</span> <span class="n">Student</span><span class="p">()</span> <span class="c1"># Python doesn't require you to say new</span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            That's it. Notice that there is no output. She's just sitting there. That's ok. We told her to be born as a student, we didn't tell her to do anything. Unless otherwise specified, an object will just sit there, existing. Let's make her do something:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [543]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">Jiaojiao</span><span class="o">.</span><span class="n">say_what_you_are</span><span class="p">()</span>    <span class="c1"># the "." notation is used to "call" things out of or from an object. </span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I am a student
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            That's all this student class can do. Not very interesting. We will write over thr first definition with a better one. Let's add an attribute:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [544]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="n">name</span> <span class="o">=</span> <span class="s2">""</span>                    <span class="c1"># we've added an attribute "name", that starts blank</span>
    
    <span class="k">def</span> <span class="nf">say_what_you_are</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I am a student"</span><span class="p">)</span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Now "Student"s have a name, set to nothing by default. Let's see how we would use that:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [545]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">Ashmi</span> <span class="o">=</span> <span class="n">Student</span><span class="p">()</span>         <span class="c1"># create Ashmi </span>

<span class="nb">print</span><span class="p">(</span><span class="n">Ashmi</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>         <span class="c1"># Will print an empty string. Not helpful!</span>

<span class="n">Ashmi</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Ashmmi"</span>     <span class="c1"># give her a name, because it starts as nothing. No (), because its not a function/method</span>

<span class="nb">print</span><span class="p">(</span><span class="n">Ashmi</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>         <span class="c1"># we can print her name now</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>
Ashmmi
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Let's make the class more usefull by adding an introduce itself. This requires us to understand "self" more. "self" is to explicity tell the object what to do and let it know it's talking about itself. It's as if you pass it to itself so it can do things to itself, like how Perl has "$self = shift". It's "self" aware, in that it can get to it's attibutes. This is a really powerful idea becaues it allows us to direct lots of objects with making each one.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [546]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="n">name</span> <span class="o">=</span> <span class="s2">""</span>
    
    <span class="k">def</span> <span class="nf">say_what_you_are</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I am a student"</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">introduce_yourself</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>         <span class="c1"># let it know who it will be talking about.</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Hello, I am"</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>   <span class="c1"># acces the name of self</span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Here is how we can use this and the objects will say their specific name.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [547]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">Nareh</span> <span class="o">=</span> <span class="n">Student</span><span class="p">()</span>
<span class="n">Nareh</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Nareh"</span>

<span class="n">Ashmi</span> <span class="o">=</span> <span class="n">Student</span><span class="p">()</span>
<span class="n">Ashmi</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Ashmi"</span>

<span class="n">Nareh</span><span class="o">.</span><span class="n">introduce_yourself</span><span class="p">()</span>     <span class="c1"># they will give their names with the same method call</span>
<span class="n">Ashmi</span><span class="o">.</span><span class="n">introduce_yourself</span><span class="p">()</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>Hello, I am Nareh
Hello, I am Ashmi
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <h1 id="Contructor/Initializer/BUILD">
            Contructor/Initializer/BUILD<a class="anchor-link" href="#Contructor/Initializer/BUILD">Â¶</a>
          </h1>
        </div>
      </div>
    </div>You make have noticed that it's annoying to specify the name after the object is created. We can make this automatic with a "contructor" or "initializer", a special function that triggers automatically whenever an object is initialized. in Perl/Moose this is called BUILD. In Python it's called "__init__" to differentiate it form other functions. We will add one. It will take an argument, like any other function might and USE IT TO SET TE ATTRIBUTES OF THE CLASS. 
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [548]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="n">name</span> <span class="o">=</span> <span class="s2">""</span>                   <span class="c1"># &lt;-------name is nothing, but will be set by __init__ (BUILD)</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>   <span class="c1"># define __init__ that acts on "self", and takes a "name"</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>        <span class="c1"># set your name attribute (above) to the name that is given to you           </span>
        
    <span class="k">def</span> <span class="nf">say_what_you_are</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I am a student"</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">introduce_yourself</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Hello, I am"</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> 
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Now we can have behavior for the object from the moment it is created. This is super powerfull because we can give them some instructions and they will get along without us.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [549]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">Nareh</span> <span class="o">=</span> <span class="n">Student</span><span class="p">(</span><span class="s2">"Nareh"</span><span class="p">)</span>     <span class="c1"># now we can just give the name from the start and don't have to mess with the object</span>
<span class="n">Ashmi</span> <span class="o">=</span> <span class="n">Student</span><span class="p">(</span><span class="s2">"Ashmi"</span><span class="p">)</span>  

<span class="n">Nareh</span><span class="o">.</span><span class="n">introduce_yourself</span><span class="p">()</span>
<span class="n">Ashmi</span><span class="o">.</span><span class="n">introduce_yourself</span><span class="p">()</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>Hello, I am Nareh
Hello, I am Ashmi
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <h1 id="Inheritance">
            Inheritance<a class="anchor-link" href="#Inheritance">Â¶</a>
          </h1>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Sometimes it is usefull to have sub catagories that a variations on the same type. This is a fancy word that, fortunately, means the same thing in OPP as it does in te regular world. An new class of objects can "inherit" attribues from an ancestor called a "base class". Let's see if there would a way to use this for Student. There are different types of students that share similar traits. We will start with something simple.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [550]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">go_on_coop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I will find a coop!"</span><span class="p">)</span>
        
        
<span class="n">John</span> <span class="o">=</span> <span class="n">Student</span><span class="p">()</span>
<span class="n">John</span><span class="o">.</span><span class="n">go_on_coop</span><span class="p">()</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I will find a coop!
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Nothing new here yet. But now we'll make a subclass of Student calles a MastersStudent that does more specific things than a general Student. It will automatically get things that a student has because we will pass the "Student" class to its definition not just any generic object.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [551]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="k">class</span> <span class="nc">GradStudent</span><span class="p">(</span><span class="n">Student</span><span class="p">):</span>               <span class="c1"># notice we pass in Student not object!!!!!!!</span>
    
    <span class="k">def</span> <span class="nf">complain_about_undergrads</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c1"># something more specific </span>
      
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Stupid undergrads!"</span><span class="p">)</span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Let's make an MS student:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [552]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">Sara</span> <span class="o">=</span> <span class="n">GradStudent</span><span class="p">()</span>             <span class="c1"># make a MastersStudent</span>

<span class="n">Sara</span><span class="o">.</span><span class="n">complain_about_undergrads</span><span class="p">()</span> <span class="c1"># we know she can complain about undergrads because we coded that above</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>Stupid undergrads!
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            We're not suprised when we see she can use complain_about_undergrads() because we specifically told her how. But guess what else Sara can do:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [553]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">Sara</span><span class="o">.</span><span class="n">go_on_coop</span><span class="p">()</span>     <span class="c1"># she "inherited" this from the generic Student class</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I will find a coop!
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Sarah can use the methods from both classes becaues she is from MastersStudent that inherits things from regular Student. If we had written "class MastersStudent(object):", it would still make a class, but not one that had access to things that Student does.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <h1 id="Multiple-Inheritance">
            Multiple Inheritance<a class="anchor-link" href="#Multiple-Inheritance">Â¶</a>
          </h1>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            We don't have to stop there. Let's get a level more specific.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [554]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="k">class</span> <span class="nc">PhdStudent</span><span class="p">(</span><span class="n">GradStudent</span><span class="p">):</span>        <span class="c1"># a PhD Student is a type of MastersStudnet, not just any Student</span>
    
    <span class="k">def</span> <span class="nf">write_dissertation</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>     <span class="c1"># they write dissertations (theortically)</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Write, write, write!"</span><span class="p">)</span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            PhD Student gets "complain_about_undergrads()" from "GradStudent", but it also gets "go_on_coop()" from GradStudent because GradStudnet gets it from Student!
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [555]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">Chuck</span> <span class="o">=</span> <span class="n">PhdStudent</span><span class="p">()</span>                  <span class="c1"># make a PhdStudent</span>

<span class="n">Chuck</span><span class="o">.</span><span class="n">go_on_coop</span><span class="p">()</span>                    <span class="c1"># look a all the shit I can do!</span>
<span class="n">Chuck</span><span class="o">.</span><span class="n">complain_about_undergrads</span><span class="p">()</span>     <span class="c1"># even though you didn't have to tell me in my class</span>
<span class="n">Chuck</span><span class="o">.</span><span class="n">write_dissertation</span><span class="p">()</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I will find a coop!
Stupid undergrads!
Write, write, write!
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            If we really wanted to go nuts, we could add another level:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [556]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="k">class</span> <span class="nc">PostDoc</span><span class="p">(</span><span class="n">PhdStudent</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">moar_phd_type_stuff</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"What the hell is wrong with me?"</span><span class="p">)</span>
        
<span class="n">Murillo</span> <span class="o">=</span> <span class="n">PostDoc</span><span class="p">()</span>

<span class="n">Murillo</span><span class="o">.</span><span class="n">go_on_coop</span><span class="p">()</span>                 <span class="c1"># can do ALL OF IT!!!</span>
<span class="n">Murillo</span><span class="o">.</span><span class="n">complain_about_undergrads</span><span class="p">()</span>
<span class="n">Murillo</span><span class="o">.</span><span class="n">write_dissertation</span><span class="p">()</span>
<span class="n">Murillo</span><span class="o">.</span><span class="n">moar_phd_type_stuff</span><span class="p">()</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I will find a coop!
Stupid undergrads!
Write, write, write!
What the hell is wrong with me?
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            This saves us a lot of repetitive writing. But what if we wanted the tree to fork?
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <h1 id="Polymorphism">
            Polymorphism<a class="anchor-link" href="#Polymorphism">Â¶</a>
          </h1>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            One might have noticed that there is more than one type of grad student, and while they share a lot of similarities, they are different in key ways. If we want to inherit some behavior and change it slightly, we can. This is called Polymorphism. We can make two subtypes of grad student out of the Student base class.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [557]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="c1">### a class of masters student based on student </span>
<span class="k">class</span> <span class="nc">MastersStudent</span><span class="p">(</span><span class="n">Student</span><span class="p">):</span>    <span class="c1"># MastersStudent - they're still based on Student</span>
    
    <span class="k">def</span> <span class="nf">panic_about_life</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I should have just done a Phd"</span><span class="p">)</span>


<span class="c1">### a class of PhD student based on student </span>
<span class="k">class</span> <span class="nc">PhdStudent</span><span class="p">(</span><span class="n">Student</span><span class="p">):</span>            <span class="c1"># PhdStudent - they're still based on Student</span>
    
    <span class="k">def</span> <span class="nf">panic_about_life</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I should have stopped at my Master's"</span><span class="p">)</span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Now these different types of subtypes will both share all the things that Student has, but the will have slightly different behavior when it is time to panic(). Observe:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [558]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">one_version_of_somone</span> <span class="o">=</span> <span class="n">MastersStudent</span><span class="p">()</span>    <span class="c1"># make a MastersStudent</span>

<span class="n">one_version_of_somone</span><span class="o">.</span><span class="n">go_on_coop</span><span class="p">()</span>          <span class="c1"># call the methods </span>
<span class="n">one_version_of_somone</span><span class="o">.</span><span class="n">panic_about_life</span><span class="p">()</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I will find a coop!
I should have just done a Phd
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Same thing but with a PhD:
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [559]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">other_version_of_somone</span> <span class="o">=</span> <span class="n">PhdStudent</span><span class="p">()</span>      <span class="c1"># make a PhdStudent</span>

<span class="n">other_version_of_somone</span><span class="o">.</span><span class="n">go_on_coop</span><span class="p">()</span>        <span class="c1"># will be the same</span>
<span class="n">other_version_of_somone</span><span class="o">.</span><span class="n">panic_about_life</span><span class="p">()</span>  <span class="c1"># will be DIFFERENT!</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I will find a coop!
I should have stopped at my Master's
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Notice how they both can go on co-op and it is the same, but when they use panic because we redefined it.
          </p>
        </div>
      </div>
    </div>Our taxonomy looks like this now: Student | __________|__________ | | V V MastersStudent PhdStudent 
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Here is another good example of "Polymorphic" behavior:
          </p>
          
          <p>
            <a href="https://stackoverflow.com/questions/3724110/practical-example-of-polymorphism">https://stackoverflow.com/questions/3724110/practical-example-of-polymorphism</a>
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <h1 id="Composition/Traits">
            Composition/Traits<a class="anchor-link" href="#Composition/Traits">Â¶</a>
          </h1>
          
          <p>
            Sometimes we want to mix and match traits without inheriting all of them. It make sense in one context for a class called "BiologicalLifeForm" pass on traits like "Eat", "Breathe", and "Reproduce". But if you had an Animals class and wanted to make "Birds" and "Dogs", it wouldn't make sense to have dogs that had the "Fly" attribute.
          </p>
          
          <p>
            To keep it in our student example, suppose we didn't want our PhD students to complain about undergrads anymore because they have to give lectures with them, but still let our MS students do it. We could make a "complainer" trait and give it to the MS students but not the PhDs. Perl calls these "roles". Most OOP systems call them "traits". Python doesn't have traits per se, you often just make another small class and "mix" it together with other ones to get what you want. For our purposes, We can make each "trait" into it's own class and pick only what we want.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [560]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="c1">### here is a "trait"</span>
<span class="k">class</span> <span class="nc">GradStudent</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>        <span class="c1"># a class of a grad student that will be the GradStudent "trait"</span>
    
    <span class="k">def</span> <span class="nf">do_things</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I study!"</span><span class="p">)</span>

        
<span class="c1">### here is the other </span>
<span class="k">class</span> <span class="nc">Complainer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>         <span class="c1"># a class of a complainer that will be the complainer "trait"</span>
    
    <span class="k">def</span> <span class="nf">complain_about_undergrads</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Seriously, they are the WORST"</span><span class="p">)</span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            Let's mix and match! We'll make a class the has one trait, and another that has both.
          </p>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [561]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="c1">### a class "composed" of one trait</span>
<span class="k">class</span> <span class="nc">PhdStudent</span><span class="p">(</span><span class="n">GradStudent</span><span class="p">):</span>  <span class="c1"># PhdStudents are GradStudents - we add "mix in" one trait to make the class</span>
    
    <span class="k">def</span> <span class="nf">say_hi</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I am a PhD student. I can't bitch about undergrads. That makes no sense."</span><span class="p">)</span>


        
<span class="c1">### a class "composed" of two traits - GradStudent and Complainer  </span>
<span class="k">class</span> <span class="nc">MastersStudent</span><span class="p">(</span><span class="n">GradStudent</span><span class="p">,</span> <span class="n">Complainer</span><span class="p">):</span>  <span class="c1"># Masters Students are GradStudents AND Complainers</span>
                                                <span class="c1"># we wix in two traits to make the class</span>
    <span class="k">def</span> <span class="nf">say_hi</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="nb">print</span><span class="p">(</span><span class="s2">"I am a MS student, I CAN bitch about undergrads. Watch:"</span><span class="p">)</span>
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [562]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">us</span> <span class="o">=</span> <span class="n">MastersStudent</span><span class="p">()</span>            <span class="c1"># make a MastersStudent</span>

<span class="n">us</span><span class="o">.</span><span class="n">say_hi</span><span class="p">()</span>                      <span class="c1"># use their traits </span>
<span class="n">us</span><span class="o">.</span><span class="n">complain_about_undergrads</span><span class="p">()</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I am a MS student, I CAN bitch about undergrads. Watch:
Seriously, they are the WORST
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing code_cell rendered">
      <div class="input">
        <div class="prompt input_prompt">
          InÂ [563]:
        </div>
        
        <div class="inner_cell">
          <div class="input_area">
            <div class=" highlight hl-ipython3">
              <pre><span></span><span class="n">them</span> <span class="o">=</span> <span class="n">PhdStudent</span><span class="p">()</span>               <span class="c1"># make a PhdStudent</span>

<span class="n">them</span><span class="o">.</span><span class="n">say_hi</span><span class="p">()</span>                     <span class="c1"># will work</span>
<span class="c1"># them.complain_about_undergrads() # will not if uncommented - didn't get composed with complain_about_undergrads()</span>
</pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="output_wrapper">
        <div class="output">
          <div class="output_area">
            <div class="prompt">
            </div>
            
            <div class="output_subarea output_stream output_stdout output_text">
              <pre>I am a PhD student. I can't bitch about undergrads. That makes no sense.
</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="cell border-box-sizing text_cell rendered">
      <div class="prompt input_prompt">
      </div>
      
      <div class="inner_cell">
        <div class="text_cell_render border-box-sizing rendered_html">
          <p>
            It's a little abstract in theory, but very useful in practice. It's where design comes in - it's not always clear which is best, or both might be just fine. Gotta tinker. It's just odd because it requires to look at coding in abstraction not just technique. For more examples, imagine you were modeling the characters in a story. I might make three traits:
          </p>
          
          <p>
            Lover
          </p>
          
          <p>
            Fighter
          </p>
          
          <p>
            Asshole
          </p>
          
          <p>
            The Hero of the story could be a Lover + Fighter. The Villian of the story would be a Fighter + Asshole. That way you could keep a trait from going where you don't want it. A less abstract example would be in something like our final. You could make traits like:
          </p>
          
          <p>
            Reader
          </p>
          
          <p>
            Writer
          </p>
          
          <p>
            Generator
          </p>
          
          <p>
            Displayer
          </p>
          
          <p>
            Objects that read in sequence data and made new subseq objects might have the traits "Reader" and "Generator", and have the _getGenbankSeqs method. The ones that wrote new fasta files might be "Writer" and have writeFasta. You could add "Displayer" to whatever one you wanted to see terminal output from (it would probably have printResults).
          </p>
        </div>
      </div>
    </div>
  </div>
<p>&lt;/div&gt;**</p>
:ET